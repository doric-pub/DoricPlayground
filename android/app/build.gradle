apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "pub.doric.playground"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 6
        versionName "2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk.abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            assets.srcDirs = [project.getRootDir().getParent() + "/bundle"]
        }
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation 'androidx.appcompat:appcompat:1.1.0'
        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
        implementation "pub.doric:core:$rootProject.ext.DoricVersion"
        implementation "pub.doric:devkit:$rootProject.ext.DoricVersion"
        implementation 'cn.bingoogolapple:bga-qrcode-zbar:1.3.7'
        implementation "pub.doric:dangle:0.1.5"
    }
}

afterEvaluate {
    buildJSBundle.exec()
}

task buildJSBundle(type: Exec) {
    workingDir project.rootDir.getParent()
    commandLine 'npm', 'run', 'build'
}

def nodeModuleDir = new File(rootDir.getParent() + File.separator + "node_modules")
if (nodeModuleDir.isDirectory()) {
    nodeModuleDir.listFiles().each {
        if (new File(it.getAbsolutePath() + File.separator + "__doric_library__").exists()) {
            println("Find doric plugin library ${it.name} in ${it}")
            def name = it.name
            if ("dangle" == it.name) {
                return
            }
            android {
                dependencies {
                    implementation project(":${name}")
                }
            }
        }
    }
}